package Bitboards;

public class WinChecker {


    public static boolean IsWon(Position position){
        if(position.redToMove) return ColorIsWon(position.yellow);
        else return ColorIsWon(position.red);
    }


    public static boolean ColorIsWon(long color){
        for(long each: winPositions){
            if((color & each) == each) return true;
        }
        return false;
    }




    public static long[] winPositions = new long[]{
            0b1111L,
            0b11110L,
            0b111100L,
            0b1111000L,
            0b11110000000L,
            0b111100000000L,
            0b1111000000000L,
            0b11110000000000L,
            0b111100000000000000L,
            0b1111000000000000000L,
            0b11110000000000000000L,
            0b111100000000000000000L,
            0b1111000000000000000000000L,
            0b11110000000000000000000000L,
            0b111100000000000000000000000L,
            0b1111000000000000000000000000L,
            0b11110000000000000000000000000000L,
            0b111100000000000000000000000000000L,
            0b1111000000000000000000000000000000L,
            0b11110000000000000000000000000000000L,
            0b111100000000000000000000000000000000000L,
            0b1111000000000000000000000000000000000000L,
            0b11110000000000000000000000000000000000000L,
            0b111100000000000000000000000000000000000000L,
            0b1000000100000010000001L,
            0b10000001000000100000010L,
            0b100000010000001000000100L,
            0b1000000100000010000001000L,
            0b10000001000000100000010000L,
            0b100000010000001000000100000L,
            0b1000000100000010000001000000L,
            0b10000001000000100000010000000L,
            0b100000010000001000000100000000L,
            0b1000000100000010000001000000000L,
            0b10000001000000100000010000000000L,
            0b100000010000001000000100000000000L,
            0b1000000100000010000001000000000000L,
            0b10000001000000100000010000000000000L,
            0b100000010000001000000100000000000000L,
            0b1000000100000010000001000000000000000L,
            0b10000001000000100000010000000000000000L,
            0b100000010000001000000100000000000000000L,
            0b1000000100000010000001000000000000000000L,
            0b10000001000000100000010000000000000000000L,
            0b100000010000001000000100000000000000000000L,
            0b1000000010000000100000001L,
            0b10000000100000001000000010L,
            0b100000001000000010000000100L,
            0b1000000010000000100000001000L,
            0b10000000100000001000000010000000L,
            0b100000001000000010000000100000000L,
            0b1000000010000000100000001000000000L,
            0b10000000100000001000000010000000000L,
            0b100000001000000010000000100000000000000L,
            0b1000000010000000100000001000000000000000L,
            0b10000000100000001000000010000000000000000L,
            0b100000001000000010000000100000000000000000L,
            0b1000001000001000001000L,
            0b10000010000010000010000L,
            0b100000100000100000100000L,
            0b1000001000001000001000000L,
            0b10000010000010000010000000000L,
            0b100000100000100000100000000000L,
            0b1000001000001000001000000000000L,
            0b10000010000010000010000000000000L,
            0b100000100000100000100000000000000000L,
            0b1000001000001000001000000000000000000L,
            0b10000010000010000010000000000000000000L,
            0b100000100000100000100000000000000000000L
            };


    public static void main(String[] args){
        for(int line = 0; line < 3; line++){
            for(int column = 0; column < 4; column++ ){
                System.out.println("0b" +  Long.toBinaryString((long)2130440 << (line*7+column)) + "L,");
            }
        }




    }




}
